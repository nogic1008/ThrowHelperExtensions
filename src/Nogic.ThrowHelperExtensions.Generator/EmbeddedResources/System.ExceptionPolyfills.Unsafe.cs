// <auto-generated/>
#pragma warning disable
#nullable enable annotations

#pragma warning disable CS0612
#pragma warning disable CS0618
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS0164
#pragma warning disable CS0219
#pragma warning disable CS8602
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631
#pragma warning disable CA1050

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

namespace System;

internal static partial class ExceptionPolyfills
{
#if !NET7_0_OR_GREATER
    /// <summary>
    /// Extension for <see cref="global::System.ArgumentNullException"/>.
    /// </summary>
    extension(global::System.ArgumentNullException)
    {
        /// <summary>
        /// Throws an <see cref="global::System.ArgumentNullException"/> if <paramref name="argument"/> is <see langword="null"/>.
        /// </summary>
        /// <param name="argument">The pointer argument to validate as non-null.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentNullException"><paramref name="argument"/> is <see langword="null"/>.</exception>
        [global::System.CLSCompliant(false)]
        public unsafe static void ThrowIfNull(
            [global::System.Diagnostics.CodeAnalysis.NotNull] void* argument,
            [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(argument))] string? paramName = null
        )
        {
            if (argument is null)
                ThrowArgumentNullException(paramName);
        }
    }
#endif // !NET7_0_OR_GREATER
}
