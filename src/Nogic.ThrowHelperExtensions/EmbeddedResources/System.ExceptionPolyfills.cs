// <auto-generated/>
#pragma warning disable
#nullable enable annotations

#pragma warning disable CS0612
#pragma warning disable CS0618
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS0164
#pragma warning disable CS0219
#pragma warning disable CS8602
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631
#pragma warning disable CA1050

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

namespace System;

/// <summary>Provides downlevel polyfills for static methods on Exception-derived types.</summary>
[global::Microsoft.CodeAnalysis.EmbeddedAttribute]
internal static partial class ExceptionPolyfills
{
#if !NET6_0_OR_GREATER
    /// <summary>
    /// Extension for <see cref="global::System.ArgumentNullException"/>.
    /// </summary>
    extension(global::System.ArgumentNullException)
    {
        /// <summary>
        /// Throws an <see cref="global::System.ArgumentNullException"/> if <paramref name="argument"/> is <see langword="null"/>.
        /// </summary>
        /// <param name="argument">The reference type argument to validate as non-null.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentNullException"><paramref name="argument"/> is <see langword="null"/>.</exception>
        public static void ThrowIfNull(
            [global::System.Diagnostics.CodeAnalysis.NotNull] object? argument,
            [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(argument))] string? paramName = null
        )
        {
            if (argument is null)
                ThrowArgumentNullException(paramName);
        }
    }
#endif // !NET6_0_OR_GREATER

#if !NET7_0_OR_GREATER
    /// <summary>
    /// Extension for <see cref="global::System.ArgumentException"/>.
    /// </summary>
    extension(global::System.ArgumentException)
    {
        /// <summary>Throws an exception if <paramref name="argument"/> is <see langword="null"/> or empty.</summary>
        /// <param name="argument">The string argument to validate as non-null and non-empty.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentNullException"><paramref name="argument"/> is <see langword="null"/>.</exception>
        /// <exception cref="global::System.ArgumentException"><paramref name="argument"/> is empty.</exception>
        public static void ThrowIfNullOrEmpty(
            [global::System.Diagnostics.CodeAnalysis.NotNull] string? argument,
            [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(argument))] string? paramName = null
        )
        {
            if (string.IsNullOrEmpty(argument))
                ThrowArgumentException(argument, paramName, "Value cannot be an empty string.");
        }
    }

    /// <summary>
    /// Extension for <see cref="global::System.ObjectDisposedException"/>.
    /// </summary>
    extension(global::System.ObjectDisposedException)
    {
        /// <summary>Throws an <see cref="global::System.ObjectDisposedException"/> if the specified <paramref name="condition"/> is <see langword="true"/>.</summary>
        /// <param name="condition">The condition to evaluate.</param>
        /// <param name="instance">The object whose type's full name should be included in any resulting <see cref="global::System.ObjectDisposedException"/>.</param>
        /// <exception cref="global::System.ObjectDisposedException">The <paramref name="condition"/> is <see langword="true"/>.</exception>
        public static void ThrowIf([global::System.Diagnostics.CodeAnalysis.DoesNotReturnIf(true)] bool condition, object instance)
        {
            if (condition)
                ThrowObjectDisposedException(instance.GetType());
        }

        /// <summary>Throws an <see cref="global::System.ObjectDisposedException"/> if the specified <paramref name="condition"/> is <see langword="true"/>.</summary>
        /// <param name="condition">The condition to evaluate.</param>
        /// <param name="type">The type whose full name should be included in any resulting <see cref="global::System.ObjectDisposedException"/>.</param>
        /// <exception cref="global::System.ObjectDisposedException">The <paramref name="condition"/> is <see langword="true"/>.</exception>
        public static void ThrowIf([global::System.Diagnostics.CodeAnalysis.DoesNotReturnIf(true)] bool condition, global::System.Type type)
        {
            if (condition)
                ThrowObjectDisposedException(type);
        }
    }
#endif // !NET7_0_OR_GREATER

#if !NET8_0_OR_GREATER
    /// <summary>
    /// Extension for <see cref="global::System.ArgumentException"/>.
    /// </summary>
    extension(global::System.ArgumentException)
    {
        /// <summary>Throws an exception if <paramref name="argument"/> is null, empty, or consists only of white-space characters.</summary>
        /// <param name="argument">The string argument to validate.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentNullException"><paramref name="argument"/> is <see langword="null"/>.</exception>
        /// <exception cref="global::System.ArgumentException"><paramref name="argument"/> is empty or consists only of white-space characters.</exception>
        public static void ThrowIfNullOrWhiteSpace(
            [global::System.Diagnostics.CodeAnalysis.NotNull] string? argument,
            [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(argument))] string? paramName = null
        )
        {
            if (string.IsNullOrWhiteSpace(argument))
                ThrowArgumentException(argument, paramName, "The value cannot be an empty string or composed entirely of whitespace.");
        }
    }

    /// <summary>
    /// Extension for <see cref="global::System.ArgumentOutOfRangeException"/>.
    /// </summary>
    extension(global::System.ArgumentOutOfRangeException)
    {
        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is equal to <paramref name="other"/>.</summary>
        /// <param name="value">The argument to validate as not equal to <paramref name="other"/>.</param>
        /// <param name="other">The value to compare with <paramref name="value"/>.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is equal to <paramref name="other"/>.</exception>
        public static void ThrowIfEqual<T>(T value, T other, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.IEquatable<T>?
        {
            if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(value, other))
                ThrowArgumentOutOfRangeException(value, paramName, $"{paramName} ('{value}') must not be equal to '{other}'.");
        }

        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is not equal to <paramref name="other"/>.</summary>
        /// <param name="value">The argument to validate as equal to <paramref name="other"/>.</param>
        /// <param name="other">The value to compare with <paramref name="value"/>.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is not equal to <paramref name="other"/>.</exception>
        public static void ThrowIfNotEqual<T>(T value, T other, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.IEquatable<T>?
        {
            if (!global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(value, other))
                ThrowArgumentOutOfRangeException(value, paramName, $"{paramName} ('{value}') must be equal to '{other}'.");
        }

        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is greater than <paramref name="other"/>.</summary>
        /// <param name="value">The argument to validate as less or equal than <paramref name="other"/>.</param>
        /// <param name="other">The value to compare with <paramref name="value"/>.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is greater than <paramref name="other"/>.</exception>
        public static void ThrowIfGreaterThan<T>(T value, T other, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.IComparable<T>
        {
            if (value.CompareTo(other) > 0)
                ThrowArgumentOutOfRangeException(value, paramName, $"{paramName} ('{value}') must be less than or equal to '{other}'.");
        }

        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is greater than or equal <paramref name="other"/>.</summary>
        /// <param name="value">The argument to validate as less than <paramref name="other"/>.</param>
        /// <param name="other">The value to compare with <paramref name="value"/>.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is greater than or equal to <paramref name="other"/>.</exception>
        public static void ThrowIfGreaterThanOrEqual<T>(T value, T other, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.IComparable<T>
        {
            if (value.CompareTo(other) >= 0)
                ThrowArgumentOutOfRangeException(value, paramName, $"{paramName} ('{value}') must be less than '{other}'.");
        }

        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is less than <paramref name="other"/>.</summary>
        /// <param name="value">The argument to validate as greater than or equal than <paramref name="other"/>.</param>
        /// <param name="other">The value to compare with <paramref name="value"/>.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <paramref name="other"/>.</exception>
        public static void ThrowIfLessThan<T>(T value, T other, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.IComparable<T>
        {
            if (value.CompareTo(other) < 0)
                ThrowArgumentOutOfRangeException(value, paramName, $"{paramName} ('{value}') must be greater than or equal to '{other}'.");
        }

        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is less than or equal <paramref name="other"/>.</summary>
        /// <param name="value">The argument to validate as greater than <paramref name="other"/>.</param>
        /// <param name="other">The value to compare with <paramref name="value"/>.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is less than or equal to <paramref name="other"/>.</exception>
        public static void ThrowIfLessThanOrEqual<T>(T value, T other, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.IComparable<T>
        {
            if (value.CompareTo(other) <= 0)
                ThrowArgumentOutOfRangeException(value, paramName, $"{paramName} ('{value}') must be greater than '{other}'.");
        }
#if NET7_0_OR_GREATER // INumberBase<T> based overloads for .NET 7 (or Greater)

        /// <summary>Throws an <see cref="ArgumentOutOfRangeException"/> if <paramref name="value"/> is zero.</summary>
        /// <param name="value">The argument to validate as non-zero.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is zero.</exception>
        public static void ThrowIfZero<T>(T value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.Numerics.INumberBase<T>
        {
            if (T.IsZero(value))
                ThrowZero(value, paramName);
        }

        /// <summary>Throws an <see cref="ArgumentOutOfRangeException"/> if <paramref name="value"/> is negative.</summary>
        /// <param name="value">The argument to validate as non-negative.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is negative.</exception>
        public static void ThrowIfNegative<T>(T value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.Numerics.INumberBase<T>
        {
            if (T.IsNegative(value))
                ThrowNegative(value, paramName);
        }

        /// <summary>Throws an <see cref="ArgumentOutOfRangeException"/> if <paramref name="value"/> is negative or zero.</summary>
        /// <param name="value">The argument to validate as non-zero or non-negative.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is negative or zero.</exception>
        public static void ThrowIfNegativeOrZero<T>(T value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
            where T : global::System.Numerics.INumberBase<T>
        {
            if (T.IsNegative(value) || T.IsZero(value))
                ThrowNegativeOrZero(value, paramName);
        }
#else // Primitive numeric type overloads for earlier .NET versions
        #region byte, sbyte
        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is zero.</summary>
        /// <param name="value">The argument to validate as non-zero.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is zero.</exception>
        public static void ThrowIfZero(byte value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        [global::System.CLSCompliant(false)]
        public static void ThrowIfZero(sbyte value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is negative.</summary>
        /// <param name="value">The argument to validate as non-negative.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is negative.</exception>
        [global::System.CLSCompliant(false)]
        public static void ThrowIfNegative(sbyte value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <summary>Throws an <see cref="global::System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is negative or zero.</summary>
        /// <param name="value">The argument to validate as non-zero or non-negative.</param>
        /// <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        /// <exception cref="global::System.ArgumentOutOfRangeException"><paramref name="value"/> is negative or zero.</exception>
        [global::System.CLSCompliant(false)]
        public static void ThrowIfNegativeOrZero(sbyte value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }
        #endregion byte, sbyte

        #region short, ushort
        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(short value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegative(sbyte, string?)"/>
        public static void ThrowIfNegative(short value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegativeOrZero(sbyte, string?)"/>
        public static void ThrowIfNegativeOrZero(short value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        [global::System.CLSCompliant(false)]
        public static void ThrowIfZero(ushort value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }
        #endregion short, ushort

        #region int, uint
        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(int value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegative(sbyte, string?)"/>
        public static void ThrowIfNegative(int value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegativeOrZero(sbyte, string?)"/>
        public static void ThrowIfNegativeOrZero(int value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        [global::System.CLSCompliant(false)]
        public static void ThrowIfZero(uint value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }
        #endregion int, uint

        #region long, ulong
        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(long value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegative(sbyte, string?)"/>
        public static void ThrowIfNegative(long value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegativeOrZero(sbyte, string?)"/>
        public static void ThrowIfNegativeOrZero(long value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        [global::System.CLSCompliant(false)]
        public static void ThrowIfZero(ulong value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }
        #endregion long, ulong

        #region float, double, decimal
        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(float value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegative(sbyte, string?)"/>
        public static void ThrowIfNegative(float value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegativeOrZero(sbyte, string?)"/>
        public static void ThrowIfNegativeOrZero(float value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(double value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegative(sbyte, string?)"/>
        public static void ThrowIfNegative(double value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegativeOrZero(sbyte, string?)"/>
        public static void ThrowIfNegativeOrZero(double value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(decimal value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegative(sbyte, string?)"/>
        public static void ThrowIfNegative(decimal value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegativeOrZero(sbyte, string?)"/>
        public static void ThrowIfNegativeOrZero(decimal value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }
        #endregion float, double, decimal

        #region nint, nuint, char
        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(nint value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegative(sbyte, string?)"/>
        public static void ThrowIfNegative(nint value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value < 0)
                ThrowNegative(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfNegativeOrZero(sbyte, string?)"/>
        public static void ThrowIfNegativeOrZero(nint value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value <= 0)
                ThrowNegativeOrZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        [global::System.CLSCompliant(false)]
        public static void ThrowIfZero(nuint value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }

        /// <inheritdoc cref="ThrowIfZero(byte, string?)"/>
        public static void ThrowIfZero(char value, [global::System.Runtime.CompilerServices.CallerArgumentExpression(nameof(value))] string? paramName = null)
        {
            if (value == 0)
                ThrowZero(value, paramName);
        }
        #endregion nint, nuint, char
#endif
    }
#endif // !NET8_0_OR_GREATER

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    private static void ThrowArgumentException(string? argument, string? paramName, string message)
    {
        global::System.ArgumentNullException.ThrowIfNull(argument, paramName);
        throw new global::System.ArgumentException(message, paramName);
    }

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    private static void ThrowArgumentNullException(string? paramName)
        => throw new global::System.ArgumentNullException(paramName);

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    private static void ThrowArgumentOutOfRangeException<T>(T value, string? paramName, string message)
        => throw new global::System.ArgumentOutOfRangeException(paramName, value, message);

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    private static void ThrowZero<T>(T value, string? paramName)
        => throw new global::System.ArgumentOutOfRangeException(paramName, value, $"{paramName} ('{value}') must be a non-zero value.");

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    private static void ThrowNegative<T>(T value, string? paramName)
        => throw new global::System.ArgumentOutOfRangeException(paramName, value, $"{paramName} ('{value}') must be a non-negative value.");

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    private static void ThrowNegativeOrZero<T>(T value, string? paramName)
        => throw new global::System.ArgumentOutOfRangeException(paramName, value, $"{paramName} ('{value}') must be a non-negative and non-zero value.");

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    private static void ThrowObjectDisposedException(global::System.Type type)
        => throw new global::System.ObjectDisposedException(type.FullName);
}
